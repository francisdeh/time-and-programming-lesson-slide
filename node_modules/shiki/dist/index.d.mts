import * as hast from 'hast';
import * as shikiji from 'shikiji';
import { StringLiteralUnion, BuiltinTheme, BundledHighlighterOptions, BuiltinLanguage, ThemeRegistrationAny, ThemeRegistrationResolved, ThemedToken, RawGrammar, LanguageRegistration, CodeOptionsSingleTheme, CodeOptionsMultipleThemes, CodeToHastOptionsCommon, CodeToThemedTokensOptions, ThemeInput } from 'shikiji';
export { toShikiTheme } from 'shikiji';

interface LineOption {
    /**
     * 1-based line number.
     */
    line: number;
    classes?: string[];
}
interface OptionsOfLineOptions {
    lineOptions?: LineOption[];
}
interface AnsiToHtmlOptions extends OptionsOfLineOptions {
    theme?: StringLiteralUnion<BuiltinTheme>;
}
interface HighlighterOptions extends BundledHighlighterOptions<BuiltinLanguage, BuiltinTheme> {
    theme?: BuiltinTheme;
}
type IThemeRegistration = ThemeRegistrationAny | StringLiteralUnion<BuiltinTheme>;
interface IShikiTheme extends ThemeRegistrationResolved {
}
interface IThemedToken extends ThemedToken {
}
interface IRawGrammar extends RawGrammar {
}
interface ILanguageRegistration extends LanguageRegistration {
    grammar?: IRawGrammar;
}
type Lang = StringLiteralUnion<BuiltinLanguage>;
type Theme = StringLiteralUnion<BuiltinTheme>;
type CodeToHtmlOptions = (Partial<CodeOptionsSingleTheme<BuiltinTheme>> | Partial<CodeOptionsMultipleThemes<BuiltinTheme>>) & CodeToHastOptionsCommon<BuiltinLanguage> & OptionsOfLineOptions;
type CodeToHtmlOptionsExtra = Omit<CodeToHastOptionsCommon<BuiltinLanguage>, 'lang'> & OptionsOfLineOptions;

declare const setCDN: () => void;
declare const setOnigasmWASM: () => void;
declare const setWasm: () => void;
declare const setColorReplacements: () => void;

declare const BUNDLED_LANGUAGES: Record<shikiji.BundledLanguage, shikiji.DynamicImportLanguageRegistration>;
declare const BUNDLED_THEMES: Record<shikiji.BundledTheme, shikiji.DynamicImportThemeRegistration>;

declare function getHighlighter(options?: HighlighterOptions): Promise<{
    ansiToThemedTokens: (ansi: string, options?: CodeToThemedTokensOptions) => ThemedToken[][];
    codeToThemedTokens: (code: string, lang: BuiltinLanguage, theme?: BuiltinTheme, options?: CodeToThemedTokensOptions<BuiltinLanguage, BuiltinTheme>) => ThemedToken[][];
    codeToHtml: {
        (code: string, options: CodeToHtmlOptions): string;
        (code: string, lang: StringLiteralUnion<BuiltinLanguage>, theme?: StringLiteralUnion<BuiltinTheme>, options?: CodeToHtmlOptionsExtra): string;
    };
    ansiToHtml(code: string, options?: AnsiToHtmlOptions): string;
    getBackgroundColor(theme: BuiltinTheme | ThemeRegistrationAny | string): string;
    getForegroundColor(theme: BuiltinTheme | ThemeRegistrationAny | string): string;
    /**
     * @deprecated Not supported by Shikiji
     */
    setColorReplacements(..._args: any[]): never;
    codeToHast(code: string, options: shikiji.CodeToHastOptions<shikiji.BundledLanguage, shikiji.BundledTheme>): hast.Root;
    codeToTokensWithThemes(code: string, options: shikiji.CodeToTokensWithThemesOptions<shikiji.BundledLanguage, shikiji.BundledTheme>): shikiji.ThemedTokenWithVariants[][];
    loadTheme(...themes: (shikiji.BundledTheme | ThemeInput)[]): Promise<void>;
    loadLanguage(...langs: (shikiji.BundledLanguage | shikiji.LanguageInput | shikiji.SpecialLanguage)[]): Promise<void>;
    getTheme(name: string | ThemeRegistrationAny): ThemeRegistrationResolved;
    getLangGrammar(name: string | shikiji.LanguageRegistration): shikiji.Grammar;
    setTheme: (name: string | ThemeRegistrationAny) => {
        theme: ThemeRegistrationResolved;
        colorMap: string[];
    };
    getLoadedLanguages(): string[];
    getLoadedThemes(): string[];
    getInternalContext(): shikiji.ShikiInternal;
}>;
type Highlighter = Awaited<ReturnType<typeof getHighlighter>>;
declare function loadTheme(theme: BuiltinTheme | ThemeInput): Promise<ThemeRegistrationResolved>;

export { type AnsiToHtmlOptions, BUNDLED_LANGUAGES, BUNDLED_THEMES, type CodeToHtmlOptions, type CodeToHtmlOptionsExtra, type Highlighter, type HighlighterOptions, type ILanguageRegistration, type IRawGrammar, type IShikiTheme, type IThemeRegistration, type IThemedToken, type Lang, type LineOption, type OptionsOfLineOptions, type Theme, getHighlighter as default, getHighlighter, loadTheme, setCDN, setColorReplacements, setOnigasmWASM, setWasm };
